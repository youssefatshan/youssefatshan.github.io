{{- define "main" }}

{{- if (and site.Params.profileMode.enabled .IsHome) }}
  {{- partial "index_profile.html" . }}

{{- else }}

  {{- if not .IsHome | and .Title }}
  <header class="page-header">
    {{- partial "breadcrumbs.html" . }}
    <h1>
      {{ .Title }}
      {{- if and (or (eq .Kind `term`) (eq .Kind `section`)) (.Param "ShowRssButtonInSectionTermList") }}
        {{- with .OutputFormats.Get "rss" }}
        <a href="{{ .RelPermalink }}" title="RSS" aria-label="RSS">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
            stroke-linecap="round" stroke-linejoin="round" height="23">
            <path d="M4 11a9 9 0 0 1 9 9" />
            <path d="M4 4a16 16 0 0 1 16 16" />
            <circle cx="5" cy="19" r="1" />
          </svg>
        </a>
        {{- end }}
      {{- end }}
    </h1>
    {{- if .Description }}
    <div class="post-description">
      {{ .Description | markdownify }}
    </div>
    {{- end }}
  </header>
  {{- end }}

  {{- if .Content }}
  <div class="post-content">
    {{- if not (.Param "disableAnchoredHeadings") }}
      {{- partial "anchored_headings.html" .Content -}}
    {{- else }}{{ .Content }}{{ end }}
  </div>
  {{- end }}

  {{- $pages := union .RegularPages .Sections }}
  {{- if .IsHome }}
    {{- $pages = where site.RegularPages "Type" "in" site.Params.mainSections }}
    {{- $pages = where $pages "Params.hiddenInHomeList" "!=" "true"  }}
  {{- end }}

  {{- $paginator := .Paginate $pages }}

  <!-- FILTER BUTTONS SECTION -->
  <section class="filters" style="margin-bottom: 2rem;">
    <div class="filter-group">
      <button class="filter-toggle" type="button" aria-expanded="true" aria-controls="category-list">Filter by Category ▼</button>
      <div class="filter-list" id="category-list">
        <button class="filter-btn" data-category="all">All</button>
        {{ range $name, $_ := .Site.Taxonomies.categories }}
          <button class="filter-btn" data-category="{{ $name | urlize }}">{{ $name }}</button>
        {{ end }}
      </div>
    </div>
    <div class="filter-group">
      <button class="filter-toggle" type="button" aria-expanded="true" aria-controls="tag-list">Filter by Tag ▼</button>
      <div class="filter-list" id="tag-list">
        <button class="filter-btn" data-tag="all">All</button>
        {{- $blogPages := where site.RegularPages "Type" "blog" }}
        {{- $usedTags := slice }}
        {{- range $blogPages }}
          {{- with .Params.tags }}
            {{- range . }}
              {{- $tag := . | urlize }}
              {{- if not (in $usedTags $tag) }}
                {{- $usedTags = $usedTags | append $tag }}
              {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- range $tag := $usedTags }}
          <button class="filter-btn" data-tag="{{ $tag }}">{{ $tag }}</button>
        {{- end }}
      </div>
    </div>
  </section>

  <!-- POSTS LIST -->
<section class="posts">
    {{- range $index, $page := $paginator.Pages }}
      {{- $class := "post-entry" }}
      {{- $cat := "" }}
      {{- with index .Params.categories 0 }}
        {{- $cat = . | urlize }}
      {{- end }}
      {{- $tags := slice }}
      {{- with .Params.tags }}
        {{- range . }}
          {{- $tags = $tags | append (urlize .) }}
        {{- end }}
      {{- end }}

      <article class="{{ $class }} post-card post-entry-thumb" data-category="{{ $cat }}" data-tags="{{ delimit $tags "," }}">
        
        {{- with .Params.cover -}}
          {{- if .image -}}
          <div class="entry-thumbnail">
            <a href="{{ $.Permalink }}" class="thumbnail-link">
              <img src="{{ .image | absURL }}" alt="{{ .alt }}" loading="lazy">
            </a>
          </div>
          {{- end -}}
        {{- end -}}

        <div class="entry-text-content">
          <header class="entry-header">
            <h2 class="entry-hint-parent">
              {{- .Title }}
              {{- if .Draft }}<span class="entry-hint" title="Draft">D</span>{{- end }}
            </h2>
          </header>

          {{- if (ne (.Param "hideSummary") true) }}
          <div class="entry-content">
            <p>{{ .Summary | plainify | htmlUnescape }}{{ if .Truncated }}...{{ end }}</p>
          </div>
          {{- end }}

          {{- if not (.Param "hideMeta") }}
          <footer class="entry-footer">
            {{- partial "post_meta.html" . -}}
          </footer>
          {{- end }}
        </div>

        <a class="entry-link" aria-label="post link to {{ .Title | plainify }}" href="{{ .Permalink }}"></a>
      </article>
      {{- end }}
  </section>

  <!-- PAGINATION -->
  {{- if gt $paginator.TotalPages 1 }}
    <footer class="page-footer">
      <nav class="pagination">
        {{- if $paginator.HasPrev }}<a class="prev" href="{{ $paginator.Prev.URL | absURL }}">« Prev</a>{{- end }}
        {{- if $paginator.HasNext }}<a class="next" href="{{ $paginator.Next.URL | absURL }}">Next »</a>{{- end }}
      </nav>
    </footer>
  {{- end }}

  <!-- FILTER SCRIPT -->
<script>
    document.addEventListener('DOMContentLoaded', () => {
      // Toggle filter lists
      document.querySelectorAll('.filter-toggle').forEach(toggle => {
        toggle.addEventListener('click', function() {
          const list = document.getElementById(this.getAttribute('aria-controls'));
          const expanded = this.getAttribute('aria-expanded') === 'true';
          this.setAttribute('aria-expanded', !expanded);
          list.style.display = expanded ? 'none' : '';
          this.innerHTML = this.innerHTML.replace(expanded ? '▲' : '▼', expanded ? '▼' : '▲');
        });
      });

      const catButtons = document.querySelectorAll('[data-category]');
      const tagButtons = document.querySelectorAll('[data-tag]');
      const posts = document.querySelectorAll('.post-card');

      let activeCategory = 'all';
      let activeTag = 'all';

      function setActiveButton(buttons, activeValue, dataAttr) {
        buttons.forEach(btn => {
          if (btn.getAttribute(dataAttr) === activeValue) {
            btn.classList.add('active');
          } else {
            btn.classList.remove('active');
          }
        });
      }

      function filterPosts() {
        posts.forEach(post => {
          const postCat = post.dataset.category;
          const postTags = post.dataset.tags ? post.dataset.tags.split(',') : [];
          const catMatch = (activeCategory === 'all' || postCat === activeCategory);
          const tagMatch = (activeTag === 'all' || postTags.includes(activeTag));
          if (catMatch && tagMatch) {
            post.style.display = 'flex';
          } else {
            post.style.display = 'none';
          }
        });
        setActiveButton(catButtons, activeCategory, 'data-category');
        setActiveButton(tagButtons, activeTag, 'data-tag');
      }

      catButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          activeCategory = btn.dataset.category;
          filterPosts();
        });
      });

      tagButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          activeTag = btn.dataset.tag;
          filterPosts();
        });
      });

      // Set initial active state
      filterPosts();
    });
  </script>

  <!-- FILTER STYLE -->
  <style>
  /* Styling for the filter button groups */
  .filter-group {
    margin-bottom: 1.5rem;
  }
  .filter-toggle {
    display: block;
    width: 100%;
    background: none;
    border: none;
    font-size: 1.25rem;
    font-weight: bold;
    text-align: left;
    padding: 0.5rem 0;
    cursor: pointer;
    color: var(--secondary);
    border-bottom: 1px solid var(--border);
    outline: none;
    transition: color 0.2s;
  }
  .filter-toggle:focus, .filter-toggle:hover {
    color: var(--primary);
  }
  .filter-list {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    display: block;
    transition: display 0.2s;
  }

  /* Base style for all filter buttons */
  .filter-btn {
    margin-right: 10px;
    margin-bottom: 10px; /* Added for better wrapping */
    padding: 8px 12px;
    background-color: var(--entry); /* Use theme's entry background */
    color: var(--secondary); /* Use theme's secondary text color */
    border: 1px solid var(--border); /* Use theme's border color */
    border-radius: var(--radius); /* Use theme's border radius */
    cursor: pointer;
    transition: background-color 0.2s, color 0.2s, border-color 0.2s;
    font-size: 1rem;
  }

  /* Hover state for inactive buttons */
  .filter-btn:hover {
    background-color: var(--tertiary);
    border-color: var(--tertiary);
  }

  /* Active state for the selected button */
.filter-btn.active {
  background-color: #007acc;
  color: #fff;
  font-weight: bold;
  box-shadow: 0 2px 8px rgba(0,0,0,0.08);
}

  /* This is the existing class for post entries, no changes needed,
     just listed here for context.
  .post-entry {
    margin-bottom: 2rem;
    padding-bottom: 1rem;
  }
  */
  /* --- Post Thumbnail Layout Styles --- */
  .post-entry-thumb {
    display: flex; /* REMOVED !important */
    flex-direction: row; /* REMOVED !important */
    gap: 1.5rem;
    align-items: flex-start;
    border-bottom: 1px solid var(--border);
    padding-bottom: 1.5rem;
  }
    
    .entry-thumbnail {
      flex-shrink: 0;
      width: 220px;
    }
    .entry-thumbnail img {
      width: 100%;
      height: auto;
      aspect-ratio: 16 / 10;
      object-fit: cover;
      border-radius: var(--radius);
    }
    .entry-text-content {
      flex-grow: 1;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .post-entry-thumb {
        flex-direction: column;
      }
      .entry-thumbnail {
        width: 100%;
        margin-bottom: 1rem;
      }
    }
</style>

{{- end }}

{{- end }}
